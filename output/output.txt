stacscheck /cs/studres/CS2002/Practicals/Practical4-Logic/StacsCheck

Stacscheck output 

bash-4.3$ stacscheck /cs/studres/CS2002/Practicals/Practical4-Logic/StacsCheck
Testing CS2002 Logic
- Looking for submission in a directory called 'source': Already in it!
* BUILD TEST - build : pass
* COMPARISON TEST - prog-1var.out : pass
* COMPARISON TEST - prog-spacing.out : pass
* COMPARISON TEST - prog-spurious.out : pass
4 out of 4 tests passed


Proving Laws - using extension target

De Morgan's Laws 

¬(AvB) = ¬A^¬B

bash-4.3$ ./ttable 2 'ab|-' 
a b : ab|- : Result
===================
0 0 :   01 :   1
0 1 :   10 :   0
1 0 :   10 :   0
1 1 :   10 :   0
bash-4.3$ ./ttable 2 'a-b-&'
a b : a-b-& : Result
====================
0 0 :  1 11 :   1
0 1 :  1 00 :   0
1 0 :  0 10 :   0
1 1 :  0 00 :   0

Running in ttable2 

bash-4.3$ ./ttable2 -ce 2 'ab|-' 'a-b-&'
a b : ab|- : Result
===================
0 0 :   01 :   1
0 1 :   10 :   0
1 0 :   10 :   0
1 1 :   10 :   0
Two formulae are equivalent



¬(A^B) = ¬Av¬B

bash-4.3$ ./ttable 2 'ab&-'
a b : ab&- : Result
===================
0 0 :   01 :   1
0 1 :   01 :   1
1 0 :   01 :   1
1 1 :   10 :   0
bash-4.3$ ./ttable 2 'a-b-|'
a b : a-b-| : Result
====================
0 0 :  1 11 :   1
0 1 :  1 01 :   1
1 0 :  0 11 :   1
1 1 :  0 00 :   0


Running in ttable2

bash-4.3$ ./ttable2 -ce 2 'ab&-' 'a-b-|'
a b : ab&- : Result
===================
0 0 :   01 :   1
0 1 :   01 :   1
1 0 :   01 :   1
1 1 :   10 :   0
Two formulae are equivalent




Distributive Laws

Av(B^C) = (AvB)^(AvC)

bash-4.3$ ./ttable 3 'abc&|'
a b c : abc&| : Result
======================
0 0 0 :    00 :   0
0 0 1 :    00 :   0
0 1 0 :    00 :   0
0 1 1 :    11 :   1
1 0 0 :    01 :   1
1 0 1 :    01 :   1
1 1 0 :    01 :   1
1 1 1 :    11 :   1
bash-4.3$ ./ttable 3 'ab|ac|&'
a b c : ab|ac|& : Result
========================
0 0 0 :   0  00 :   0
0 0 1 :   0  10 :   0
0 1 0 :   1  00 :   0
0 1 1 :   1  11 :   1
1 0 0 :   1  11 :   1
1 0 1 :   1  11 :   1
1 1 0 :   1  11 :   1
1 1 1 :   1  11 :   1


Running in ttable2

bash-4.3$ ./ttable2 -ce 3 'abc&|' 'ab|ac|&'
a b c : abc&| : Result
======================
0 0 0 :    00 :   0
0 0 1 :    00 :   0
0 1 0 :    00 :   0
0 1 1 :    11 :   1
1 0 0 :    01 :   1
1 0 1 :    01 :   1
1 1 0 :    01 :   1
1 1 1 :    11 :   1
Two formulae are equivalent



A^(BvC) = (A^B)v(A^C)

bash-4.3$ ./ttable 3 'abc|&' 
a b c : abc|& : Result
======================
0 0 0 :    00 :   0
0 0 1 :    10 :   0
0 1 0 :    10 :   0
0 1 1 :    10 :   0
1 0 0 :    00 :   0
1 0 1 :    11 :   1
1 1 0 :    11 :   1
1 1 1 :    11 :   1
bash-4.3$ ./ttable 3 'ab&ac&|' 
a b c : ab&ac&| : Result
========================
0 0 0 :   0  00 :   0
0 0 1 :   0  00 :   0
0 1 0 :   0  00 :   0
0 1 1 :   0  00 :   0
1 0 0 :   0  00 :   0
1 0 1 :   0  11 :   1
1 1 0 :   1  01 :   1
1 1 1 :   1  11 :   1


Running in ttable2

bash-4.3$ ./ttable2 -ce 3 'abc|&' 'ab&ac&|'
a b c : abc|& : Result
======================
0 0 0 :    00 :   0
0 0 1 :    10 :   0
0 1 0 :    10 :   0
0 1 1 :    10 :   0
1 0 0 :    00 :   0
1 0 1 :    11 :   1
1 1 0 :    11 :   1
1 1 1 :    11 :   1
Two formulae are equivalent



Solving Logic Questions - using ttable target

Part a)
Propositional variables : 
a: Chris wins, b: Ian wins, c: coin (1: head, 0: tail), d: Chris loses, e: Ian loses

Rules:
Assumptions a = e if Chris wins, Ian loses
            b = d if Ian wins, Chris loses

            They can't win and lose at the same time
            a -> ¬d
            b -> ¬e 

Two statements from the question: 
c -> a  if coin is head, Chris wins
¬c -> e if coin is tail, Ian loses

bash-4.3$ ./ttable 5 'ae=bd=&ad->&be->&ca>&c-e>&'
a b c d e : ae=bd=&ad->&be->&ca>&c-e>& : Result
===============================================
0 0 0 0 0 :   1  11  111  111  11 1 00 :   0
0 0 0 0 1 :   0  10  110  010  10 1 10 :   0
0 0 0 1 0 :   1  00  010  110  10 1 00 :   0
0 0 0 1 1 :   0  00  010  010  10 1 10 :   0
0 0 1 0 0 :   1  11  111  111  00 0 10 :   0
0 0 1 0 1 :   0  10  110  010  00 0 10 :   0
0 0 1 1 0 :   1  00  010  110  00 0 10 :   0
0 0 1 1 1 :   0  00  010  010  00 0 10 :   0
0 1 0 0 0 :   1  00  110  110  10 1 00 :   0
0 1 0 0 1 :   0  00  110  000  10 1 10 :   0
0 1 0 1 0 :   1  11  011  111  11 1 00 :   0
0 1 0 1 1 :   0  10  010  000  10 1 10 :   0
0 1 1 0 0 :   1  00  110  110  00 0 10 :   0
0 1 1 0 1 :   0  00  110  000  00 0 10 :   0
0 1 1 1 0 :   1  11  011  111  00 0 10 :   0
0 1 1 1 1 :   0  10  010  000  00 0 10 :   0
1 0 0 0 0 :   0  10  110  110  10 1 00 :   0
1 0 0 0 1 :   1  11  111  011  11 1 11 :   1
1 0 0 1 0 :   0  00  000  110  10 1 00 :   0
1 0 0 1 1 :   1  00  000  010  10 1 10 :   0
1 0 1 0 0 :   0  10  110  110  10 0 10 :   0
1 0 1 0 1 :   1  11  111  011  11 0 11 :   1
1 0 1 1 0 :   0  00  000  110  10 0 10 :   0
1 0 1 1 1 :   1  00  000  010  10 0 10 :   0
1 1 0 0 0 :   0  00  110  110  10 1 00 :   0
1 1 0 0 1 :   1  00  110  000  10 1 10 :   0
1 1 0 1 0 :   0  10  000  110  10 1 00 :   0
1 1 0 1 1 :   1  11  000  000  10 1 10 :   0
1 1 1 0 0 :   0  00  110  110  10 0 10 :   0
1 1 1 0 1 :   1  00  110  000  10 0 10 :   0
1 1 1 1 0 :   0  10  000  110  10 0 10 :   0
1 1 1 1 1 :   1  11  000  000  10 0 10 :   0

Answer:
There are two solutions:
i) when coin is head, Chris wins, so Ian loses
ii) when coin is tail, Ian loses, meaning Chris wins.
So for both scenarios the overall outcome will be Chris as a winner.

Part b)
Propositional variables:
a: Ian is the oldest, b: Steve is the oldest, c: Chris is the oldest
d: Ian is the youngest, e: Steve is the youngest, f: Chris is the youngest

Rules:
Assumptions :

If one is the oldest, others can't be oldests.
a -> ¬b & ¬c
b -> ¬a & ¬c
c -> ¬a & ¬b

One can't be the oldest and youngest at the same time
a -> ¬d
b -> ¬e
c -> ¬f

If one is the youngest, others can't be the youngests.
d -> ¬e & ¬f
e -> ¬d & ¬f
f -> ¬d & ¬e

Two statements from the question:
b | c Either Steve or Chris is the oldest
a | f Either Ian is oldest or Chris is the youngest

bash-4.3$ ./ttable 6 'ab-c-&>ba-c-&>&ca-b-&>&ad->&be->&cf->&de-f-&>&ed-f-&>&fd-e-&>&bc|&af|&'
a b c d e f : ab-c-&>ba-c-&>&ca-b-&>&ad->&be->&cf->&de-f-&>&ed-f-&>&fd-e-&>&bc|&af|& : Result
=============================================================================================
0 0 0 0 0 0 :   1 111  1 1111  1 1111  111  111  111  1 1111  1 1111  1 1111  00  00 :   0
0 0 0 0 0 1 :   1 111  1 1111  1 1111  111  111  011  1 0011  1 0011  1 1111  00  10 :   0
0 0 0 0 1 0 :   1 111  1 1111  1 1111  111  011  111  0 1011  1 1111  1 0011  00  00 :   0
0 0 0 0 1 1 :   1 111  1 1111  1 1111  111  011  011  0 0011  1 0000  1 0000  00  10 :   0
0 0 0 1 0 0 :   1 111  1 1111  1 1111  011  111  111  1 1111  0 1011  0 1011  00  00 :   0
0 0 0 1 0 1 :   1 111  1 1111  1 1111  011  111  011  1 0000  0 0010  0 1000  00  10 :   0
0 0 0 1 1 0 :   1 111  1 1111  1 1111  011  011  111  0 1000  0 1000  0 0010  00  00 :   0
0 0 0 1 1 1 :   1 111  1 1111  1 1111  011  011  011  0 0000  0 0000  0 0000  00  10 :   0
0 0 1 0 0 0 :   1 001  1 0011  1 1111  111  111  111  1 1111  1 1111  1 1111  11  00 :   0
0 0 1 0 0 1 :   1 001  1 0011  1 1111  111  111  000  1 0010  1 0010  1 1110  10  10 :   0
0 0 1 0 1 0 :   1 001  1 0011  1 1111  111  011  111  0 1011  1 1111  1 0011  11  00 :   0
0 0 1 0 1 1 :   1 001  1 0011  1 1111  111  011  000  0 0010  1 0000  1 0000  10  10 :   0
0 0 1 1 0 0 :   1 001  1 0011  1 1111  011  111  111  1 1111  0 1011  0 1011  11  00 :   0
0 0 1 1 0 1 :   1 001  1 0011  1 1111  011  111  000  1 0000  0 0010  0 1000  10  10 :   0
0 0 1 1 1 0 :   1 001  1 0011  1 1111  011  011  111  0 1000  0 1000  0 0010  10  00 :   0
0 0 1 1 1 1 :   1 001  1 0011  1 1111  011  011  000  0 0000  0 0000  0 0000  10  10 :   0
0 1 0 0 0 0 :   0 101  1 1111  1 0011  111  111  111  1 1111  1 1111  1 1111  11  00 :   0
0 1 0 0 0 1 :   0 101  1 1111  1 0011  111  111  011  1 0011  1 0011  1 1111  11  11 :   1
0 1 0 0 1 0 :   0 101  1 1111  1 0011  111  000  110  0 1010  1 1110  1 0010  10  00 :   0
0 1 0 0 1 1 :   0 101  1 1111  1 0011  111  000  010  0 0010  1 0000  1 0000  10  10 :   0
0 1 0 1 0 0 :   0 101  1 1111  1 0011  011  111  111  1 1111  0 1011  0 1011  11  00 :   0
0 1 0 1 0 1 :   0 101  1 1111  1 0011  011  111  011  1 0000  0 0010  0 1000  10  10 :   0
0 1 0 1 1 0 :   0 101  1 1111  1 0011  011  000  110  0 1000  0 1000  0 0010  10  00 :   0
0 1 0 1 1 1 :   0 101  1 1111  1 0011  011  000  010  0 0000  0 0000  0 0000  10  10 :   0
0 1 1 0 0 0 :   0 001  1 0000  1 0000  110  110  110  1 1110  1 1110  1 1110  10  00 :   0
0 1 1 0 0 1 :   0 001  1 0000  1 0000  110  110  000  1 0010  1 0010  1 1110  10  10 :   0
0 1 1 0 1 0 :   0 001  1 0000  1 0000  110  000  110  0 1010  1 1110  1 0010  10  00 :   0
0 1 1 0 1 1 :   0 001  1 0000  1 0000  110  000  000  0 0010  1 0000  1 0000  10  10 :   0
0 1 1 1 0 0 :   0 001  1 0000  1 0000  010  110  110  1 1110  0 1010  0 1010  10  00 :   0
0 1 1 1 0 1 :   0 001  1 0000  1 0000  010  110  000  1 0000  0 0010  0 1000  10  10 :   0
0 1 1 1 1 0 :   0 001  1 0000  1 0000  010  000  110  0 1000  0 1000  0 0010  10  00 :   0
0 1 1 1 1 1 :   0 001  1 0000  1 0000  010  000  000  0 0000  0 0000  0 0000  10  10 :   0
1 0 0 0 0 0 :   1 111  0 1011  0 1011  111  111  111  1 1111  1 1111  1 1111  00  10 :   0
1 0 0 0 0 1 :   1 111  0 1011  0 1011  111  111  011  1 0011  1 0011  1 1111  00  10 :   0
1 0 0 0 1 0 :   1 111  0 1011  0 1011  111  011  111  0 1011  1 1111  1 0011  00  10 :   0
1 0 0 0 1 1 :   1 111  0 1011  0 1011  111  011  011  0 0011  1 0000  1 0000  00  10 :   0
1 0 0 1 0 0 :   1 111  0 1011  0 1011  000  110  110  1 1110  0 1010  0 1010  00  10 :   0
1 0 0 1 0 1 :   1 111  0 1011  0 1011  000  110  010  1 0000  0 0010  0 1000  00  10 :   0
1 0 0 1 1 0 :   1 111  0 1011  0 1011  000  010  110  0 1000  0 1000  0 0010  00  10 :   0
1 0 0 1 1 1 :   1 111  0 1011  0 1011  000  010  010  0 0000  0 0000  0 0000  00  10 :   0
1 0 1 0 0 0 :   1 000  0 0010  0 1000  110  110  110  1 1110  1 1110  1 1110  10  10 :   0
1 0 1 0 0 1 :   1 000  0 0010  0 1000  110  110  000  1 0010  1 0010  1 1110  10  10 :   0
1 0 1 0 1 0 :   1 000  0 0010  0 1000  110  010  110  0 1010  1 1110  1 0010  10  10 :   0
1 0 1 0 1 1 :   1 000  0 0010  0 1000  110  010  000  0 0010  1 0000  1 0000  10  10 :   0
1 0 1 1 0 0 :   1 000  0 0010  0 1000  000  110  110  1 1110  0 1010  0 1010  10  10 :   0
1 0 1 1 0 1 :   1 000  0 0010  0 1000  000  110  000  1 0000  0 0010  0 1000  10  10 :   0
1 0 1 1 1 0 :   1 000  0 0010  0 1000  000  010  110  0 1000  0 1000  0 0010  10  10 :   0
1 0 1 1 1 1 :   1 000  0 0010  0 1000  000  010  000  0 0000  0 0000  0 0000  10  10 :   0
1 1 0 0 0 0 :   0 100  0 1000  0 0010  110  110  110  1 1110  1 1110  1 1110  10  10 :   0
1 1 0 0 0 1 :   0 100  0 1000  0 0010  110  110  010  1 0010  1 0010  1 1110  10  10 :   0
1 1 0 0 1 0 :   0 100  0 1000  0 0010  110  000  110  0 1010  1 1110  1 0010  10  10 :   0
1 1 0 0 1 1 :   0 100  0 1000  0 0010  110  000  010  0 0010  1 0000  1 0000  10  10 :   0
1 1 0 1 0 0 :   0 100  0 1000  0 0010  000  110  110  1 1110  0 1010  0 1010  10  10 :   0
1 1 0 1 0 1 :   0 100  0 1000  0 0010  000  110  010  1 0000  0 0010  0 1000  10  10 :   0
1 1 0 1 1 0 :   0 100  0 1000  0 0010  000  000  110  0 1000  0 1000  0 0010  10  10 :   0
1 1 0 1 1 1 :   0 100  0 1000  0 0010  000  000  010  0 0000  0 0000  0 0000  10  10 :   0
1 1 1 0 0 0 :   0 000  0 0000  0 0000  110  110  110  1 1110  1 1110  1 1110  10  10 :   0
1 1 1 0 0 1 :   0 000  0 0000  0 0000  110  110  000  1 0010  1 0010  1 1110  10  10 :   0
1 1 1 0 1 0 :   0 000  0 0000  0 0000  110  000  110  0 1010  1 1110  1 0010  10  10 :   0
1 1 1 0 1 1 :   0 000  0 0000  0 0000  110  000  000  0 0010  1 0000  1 0000  10  10 :   0
1 1 1 1 0 0 :   0 000  0 0000  0 0000  000  110  110  1 1110  0 1010  0 1010  10  10 :   0
1 1 1 1 0 1 :   0 000  0 0000  0 0000  000  110  000  1 0000  0 0010  0 1000  10  10 :   0
1 1 1 1 1 0 :   0 000  0 0000  0 0000  000  000  110  0 1000  0 1000  0 0010  10  10 :   0
1 1 1 1 1 1 :   0 000  0 0000  0 0000  000  000  000  0 0000  0 0000  0 0000  10  10 :   0

Answer:
There is only one solution - Steve is the oldest, Ian is the middle and Chris is the youngest

Part c)
Propositional variables:
a : Ann attended the dinner
b: Barbara atteded the dinner
c: Charles attended the dinner
d: Deborah attended the dinner
e: Eleanor attended the dinner

Rules:
statements from the question:
c | d 
b ^ e
a -> b
e = d
c -> a & b

bash-4.3$ ./ttable 5 'cd|be#&ab>&ed=&cad&>&'
a b c d e : cd|be#&ab>&ed=&cad&>& : Result
==========================================
0 0 0 0 0 :   0  00  10  10   010 :   0
0 0 0 0 1 :   0  10  10  00   010 :   0
0 0 0 1 0 :   1  00  10  00   010 :   0
0 0 0 1 1 :   1  11  11  11   011 :   1
0 0 1 0 0 :   1  00  10  10   000 :   0
0 0 1 0 1 :   1  11  11  00   000 :   0
0 0 1 1 0 :   1  00  10  00   000 :   0
0 0 1 1 1 :   1  11  11  11   000 :   0
0 1 0 0 0 :   0  10  10  10   010 :   0
0 1 0 0 1 :   0  00  10  00   010 :   0
0 1 0 1 0 :   1  11  11  00   010 :   0
0 1 0 1 1 :   1  00  10  10   010 :   0
0 1 1 0 0 :   1  11  11  11   000 :   0
0 1 1 0 1 :   1  00  10  00   000 :   0
0 1 1 1 0 :   1  11  11  00   000 :   0
0 1 1 1 1 :   1  00  10  10   000 :   0
1 0 0 0 0 :   0  00  00  10   010 :   0
1 0 0 0 1 :   0  10  00  00   010 :   0
1 0 0 1 0 :   1  00  00  00   110 :   0
1 0 0 1 1 :   1  11  00  10   110 :   0
1 0 1 0 0 :   1  00  00  10   000 :   0
1 0 1 0 1 :   1  11  00  00   000 :   0
1 0 1 1 0 :   1  00  00  00   110 :   0
1 0 1 1 1 :   1  11  00  10   110 :   0
1 1 0 0 0 :   0  10  10  10   010 :   0
1 1 0 0 1 :   0  00  10  00   010 :   0
1 1 0 1 0 :   1  11  11  00   110 :   0
1 1 0 1 1 :   1  00  10  10   110 :   0
1 1 1 0 0 :   1  11  11  11   000 :   0
1 1 1 0 1 :   1  00  10  00   000 :   0
1 1 1 1 0 :   1  11  11  00   110 :   0
1 1 1 1 1 :   1  00  10  10   110 :   0

Answer : Hence, only possible way is when only Deborah and Eleanor attend.

EXTENSION ----------------------------------------------------------------
Extension puzzle:
Propositional variables:
a : box1 has prize
b : a is true
c : box 2 has a black card ie b is false

Rules:
True and False combination is only possible as 1T2F or 2T1F hence:  
(a&b&¬c)|(a&¬b&c)|(¬a&b&c)


b -> a since b states that a is true, if b is true, this implies its statement is also true.
c -> ¬a since c states that b is telling a lie, since label on a black card will be false, so 
        transitively if b is false, this implies that a is false too. 

bash-4.3$ ./ttable 3 'ab&c-&ab-&c&|a-b&c&|ba>&ca->&'
a b c : ab&c-&ab-&c&|a-b&c&|ba>&ca->& : Result
==============================================
0 0 0 :   0 10  10 00 1 0 00  10  110 :   0
0 0 1 :   0 00  10 00 1 0 00  10  110 :   0
0 1 0 :   0 10  00 00 1 1 00  00  110 :   0
0 1 1 :   0 00  00 00 1 1 11  00  110 :   0
1 0 0 :   0 10  11 00 0 0 00  10  010 :   0
1 0 1 :   0 00  11 11 0 0 01  11  000 :   0
1 1 0 :   1 11  00 01 0 0 01  11  011 :   1
1 1 1 :   1 00  00 00 0 0 00  10  000 :   0

Answer:
Only solution is when a and b are true. 
This case, box 1 will have a prize. box 2 has a red card and box 3 will have a black card.


